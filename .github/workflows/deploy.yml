name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm config set fetch-retry-maxtimeout 600000
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-timeout 600000
          npm ci --prefer-offline --no-audit --no-fund

      - name: Run lint
        run: npm run lint --if-present || echo "Linting skipped"

      - name: Build application
        run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build and Push Docker Image
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.simple
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.DOKPLOY_HOST != ''
    name: Deploy to Dokploy
    
    steps:
      - name: Deploy to Dokploy
        if: ${{ secrets.DOKPLOY_HOST && secrets.DOKPLOY_USER && secrets.DOKPLOY_SSH_KEY && secrets.DOKPLOY_WEBHOOK_URL }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DOKPLOY_HOST }}
          username: ${{ secrets.DOKPLOY_USER }}
          key: ${{ secrets.DOKPLOY_SSH_KEY }}
          script: |
            # Update the deployment with new image
            curl -X POST "${{ secrets.DOKPLOY_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "image": "ghcr.io/${{ github.repository }}:latest",
                "tag": "latest"
              }'
      
      - name: Deployment skipped
        if: ${{ !secrets.DOKPLOY_HOST || !secrets.DOKPLOY_USER || !secrets.DOKPLOY_SSH_KEY || !secrets.DOKPLOY_WEBHOOK_URL }}
        run: |
          echo "‚è≠Ô∏è Deployment skipped - Dokploy secrets not configured"
          echo "‚úÖ Docker image built and pushed successfully to ghcr.io/${{ github.repository }}:latest"
          echo "üîß To enable auto-deployment, configure these repository secrets:"
          echo "   - DOKPLOY_HOST"
          echo "   - DOKPLOY_USER" 
          echo "   - DOKPLOY_SSH_KEY"
          echo "   - DOKPLOY_WEBHOOK_URL"